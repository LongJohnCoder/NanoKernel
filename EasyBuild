#!/usr/bin/env python3

import tempfile
import os
import os.path
import shutil
import subprocess as sp


def set_type_creator(f, t, c, **kwargs):
    sp.run(['SetFile', '-t', t, '-c', c, f], stdout=sp.DEVNULL, stderr=sp.DEVNULL, **kwargs)


thisdir = os.path.dirname(os.path.abspath(__file__))
os.chdir(thisdir)

asmfiles = [f for f in os.listdir() if f.endswith('.s') and os.path.isfile(f)]

try:
    buildtime = os.path.getmtime('Build/NanoKernel.xcoff')
except FileNotFoundError:
    pass
else:
    if max(os.path.getmtime(f) for f in asmfiles) < buildtime:
        print('already built')
        exit()

print('building...', flush=True)

with tempfile.TemporaryDirectory() as tmpdir:
    for asmfile in asmfiles:
        with open(asmfile, 'rb') as i, open(os.path.join(tmpdir, asmfile), 'wb') as o:
            o.write(i.read().replace(b'\n', b'\r'))

    sp.run(['mpw', 'PPCAsm', 'Main.s'], check=True, cwd=tmpdir)
    with open(os.path.join(tmpdir, 'Main.s.o'), 'rb') as f:
        xcoff = f.read()

xcoffsecstart = 0x3C
xcoffsecstop = xcoffsecstart + int.from_bytes(xcoff[0x24:0x28], byteorder='big')
raw = xcoff[xcoffsecstart:xcoffsecstop]

builddir = os.path.join(thisdir, 'Build')
os.makedirs(builddir, exist_ok=True)
os.chdir(builddir)

with open('NanoKernel.xcoff', 'wb') as f:
    f.write(xcoff)
set_type_creator('NanoKernel.xcoff', 'XCOF', 'MPS ', check=False)
with open('NanoKernel.raw', 'wb') as f:
    f.write(raw)
print('created raw and xcoff files', flush=True)

step = 64
starts = range(0, len(raw), step)
with open('NanoKernel.r', 'w') as f:
    print("data 'krnl' (0, locked) {", file=f)
    for i in starts:
        print('  $"%s"' % raw[i:i+step].hex(), file=f)
    print('};', file=f)
set_type_creator('NanoKernel.r', 'TEXT', 'MPS ', check=False)
print('created Rez file', flush=True)

try:
    sp.run(['Rez', '-a', '-o', 'NanoKernel.rsrc', 'NanoKernel.r'], stdout=sp.DEVNULL, stderr=sp.DEVNULL, check=True)
    print('created resource file with krnl resource', flush=True)
    set_type_creator('NanoKernel.rsrc', 'rsrc', 'RSED', check=True)
    try:
        os.unlink('NanoKernel.hqx')
    except:
        pass
    sp.run(['binhex', 'encode', '-o', 'NanoKernel.hqx', 'NanoKernel.rsrc'], stdout=sp.DEVNULL, stderr=sp.DEVNULL, check=True)
    print('created BinHex of resource file', flush=True)
except:
    pass
